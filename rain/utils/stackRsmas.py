#!/usr/bin/env python3
#####################################
#Author: Sara Mirzaee
# based on stackSentinel.py
#####################################

import os, sys
import argparse
from stackSentinel import get_dates
import numpy as np
from rain.objects.stack_rsmas import config, pre_run, post_run
from pysqsar_utilities import convert_geo2image_coord, patch_slice

helpstr= '''
Stack processor for Sentinel-1 data using process_rsmas.py .
For a full list of different options, try stackRsmas.py -h
Change the --text_cmd option as you wish. 
Note that stackSentinel_squeesar.py does not process any data. It only prepares a lot of input files for processing 
and a lot of run files. Then you need to execute all those generated run files in order. To know what is really 
going on, after running stackRsmas.py, look at each run file generated by stackRsmas.py in 
pre_run_files and post_run_files folder. Each run file actually has several commands that are independent from each other and can be 
executed in parallel. The config files (located in configs_pre folder) for each run file include the processing options 
to execute a specific command/function.
Note also that run files need to be executed in order, i.e., running run_3 needs results from run_2, etc.
Example:
stackRsmas.py -s ../merged/SLC/ -w ./ -b '19 20 -99.5 -98.5' -wra 21 -waz 15 
'''
##############################################


class customArgparseAction(argparse.Action):
    def __call__(self, parser, args, values, option_string=None):
        '''
        The action to be performed.
        '''
        print(helpstr)
        parser.exit()


def createParser():
    parser = argparse.ArgumentParser(
        description='Preparing the directory structure and config files for stack processing of Sentinel data')

    parser.add_argument('-H', '--hh', nargs=0, action=customArgparseAction,
                        help='Display detailed help information.')

    parser.add_argument('--customTemplateFile', dest='customTemplateFile', nargs='?',
                        help='custom template with option settings.\n' +
                             "It's equivalent to None if default pysarApp_template.txt is input.")

    parser.add_argument('-s', '--slc_directory', dest='slc_dirname', type=str, default='./SLC',
                        help='Directory with all Sentinel coregistered SLCs')

    parser.add_argument('-w', '--working_directory', dest='work_dir', type=str, default='./',
                        help='Working directory (project directory)')

    parser.add_argument('-T', '--technique', dest='technique', type=str, default='smallbaseline',
                        help='The InSAR processing workflow : (smallbaseline, squeesar) -- Default : smallbaseline')

    parser.add_argument('-p', '--patchsize', dest='patch_size', type=str, default='200', help='Patch size')

    parser.add_argument('-m', '--plmethod', dest='plmethod', type=str, default='sequential_EMI',
                        help='Phase linking method ["EVD","EMI","PTA","sequential_EVD","sequential_EMI","sequential_PTA"] '
                             'default: sequential EMI.')

    parser.add_argument('-rw', '--range_window', dest='range_window', type=str, default='21'
                        , help='SHP searching window size in range direction. -- Default : 21')

    parser.add_argument('-aw', '--azimuth_window', dest='azimuth_window', type=str, default='15'
                        , help='SHP searching window size in azimuth direction. -- Default : 15')


    parser.add_argument('-b', '--bbox', dest='bbox', type=str, default=None,
                        help="Lat/Lon Bounding SNWE. -- Example : '19 20 -99.5 -98.5' -- cropping area")

    parser.add_argument('-t', '--text_cmd', dest='text_cmd', type=str, default='',
                        help="text command to be added to the beginning of each line of the run files. -- Example : 'source ~/.bash_profile;' -- Default : ''")

    parser.add_argument('-x', '--exclude_dates', dest='exclude_dates', type=str, default=None,
                        help="List of the dates to be excluded for processing. -- Example : '20141007,20141031' -- Default: No dates excluded")

    parser.add_argument('-i', '--include_dates', dest='include_dates', type=str, default=None
                        ,
                        help="List of the dates to be included for processing. -- Example : '20141007,20141031' -- Default: No dates excluded")

    parser.add_argument('-z', '--azimuth_looks', dest='azimuthLooks', type=str, default='3'
                        , help='Number of looks in azimuth for interferogram multi-looking. -- Default : 3')

    parser.add_argument('-r', '--range_looks', dest='rangeLooks', type=str, default='9'
                        , help='Number of looks in range for interferogram multi-looking. -- Default : 9')

    parser.add_argument('-u', '--unw_method', dest='unwMethod', type=str, default='snaphu'
                        , help='Unwrapping method (icu or snaphu). -- Default : snaphu')


    return parser


def cmdLineParse(iargs=None):
    parser = createParser()
    inps = parser.parse_args(args=iargs)
    inps.slc_dirname = os.path.abspath(inps.slc_dirname)
    inps.work_dir = os.path.abspath(inps.work_dir)

    import pbd; pdb.set_trace()

    return inps


########################################
# workflow:

def preprocessStack(inps, i = 0):

    i += 1
    runObj = pre_run()
    runObj.configure(inps, 'run_' + str(i) + "_download_data")
    runObj.downloadData(inps)
    runObj.finalize()

    i += 1
    runObj = pre_run()
    runObj.configure(inps, 'run_' + str(i) + "_download_dem")
    runObj.creatOrCopyDEM(inps)
    runObj.finalize()

    return i


def generalStack(inps, i):

    i += 1
    runObj = post_run()
    runObj.configure(inps, 'run_' + str(i) + "_email_pysar")
    runObj.emailPySAR(inps)
    runObj.finalize()

    i += 1
    runObj = post_run()
    runObj.configure(inps, 'run_' + str(i) + "_ingest_insarmaps")
    runObj.ingestInsarmaps(inps)
    runObj.finalize()

    i += 1
    runObj = post_run()
    runObj.configure(inps, 'run_' + str(i) + "_email_insarmaps")
    runObj.emailInsarmaps(inps)
    runObj.finalize()

    return i


def smallbaselineStack(inps, i = 0):

    i+=1
    runObj = post_run()
    runObj.configure(inps, 'run_' + str(i) + "_pysar_small_baseline")
    runObj.pysarSB(inps)
    runObj.finalize()

    i = generalStack(inps, i)

    return i



def squeesarStack(inps, acquisition_dates, pairs, i = 0):
    #############################

    i+=1
    runObj = post_run()
    runObj.configure(inps, 'run_' + str(i) + "_crop_merged_slc")
    runObj.cropMergedSlc(acquisition_dates,inps)
    runObj.finalize()

    i += 1
    runObj = post_run()
    runObj.configure(inps, 'run_' + str(i) + "_create_patch")
    runObj.createPatch(inps)
    runObj.finalize()

    i += 1
    runObj = post_run()
    runObj.configure(inps, 'run_' + str(i) + "_phase_linking")
    runObj.phaseLinking(inps)
    runObj.finalize()

    i += 1
    runObj = post_run()
    runObj.configure(inps, 'run_' + str(i) + "_generate_interferogram_and_coherence")
    runObj.generateIfg(inps, acquisition_dates)
    runObj.finalize()

    i+=1
    runObj = post_run()
    runObj.configure(inps, 'run_' + str(i) + "_unwrap")
    runObj.unwrap(inps, pairs)
    runObj.finalize()

    i += 1
    runObj = post_run()
    runObj.configure(inps, 'run_' + str(i) + "_corrections_and_velocity")
    runObj.pysarCorrections(inps)
    runObj.finalize()

    i = generalStack(inps, i)

    return i


def main(iargs=None):


    inps = cmdLineParse(iargs)


    if os.path.exists(os.path.join(inps.work_dir, 'post_run_files')):
        print('')
        print('**************************')
        print('post_run_files folder exists.')
        print(os.path.join(inps.work_dir, 'post_run_files'), ' already exists.')
        print('Please remove or rename this folder and try again.')
        print('')
        print('**************************')
    else:

        if inps.technique == 'smallbaseline':

            smallbaselineStack(inps, i=0)

        else:

            dateList, stackMasterDate, slaveDates, safe_dict = get_dates(inps)

            inps.geo_master_dir = os.path.join(inps.work_dir, 'merged/geom_master')
            inps.squeesar_dir = os.path.join(inps.work_dir, 'SqueeSAR')

            cbox = [val for val in inps.bbox.split()]
            if len(cbox) != 4:
                raise Exception('Bbox should contain 4 floating point values')


            crop_area = np.array(convert_geo2image_coord(inps.geo_master_dir, np.float32(cbox[0]), np.float32(cbox[1]),
                                                 np.float32(cbox[2]), np.float32(cbox[3])))

            inps.lin = crop_area[1] - crop_area[0]
            inps.sam = crop_area[3] - crop_area[2]

            inps.patch_rows, inps.patch_cols, inps.patch_list = \
                patch_slice(inps.lin, inps.sam, np.int(inps.azimuth_window), np.int(inps.range_window), np.int(inps.patch_size))

            inps.bbox_rdr = '{} {} {} {}'.format(crop_area[0],crop_area[1],crop_area[2],crop_area[3])
            print(inps.bbox_rdr)

            if os.path.exists(os.path.join(inps.work_dir, 'run_files_SQ')):
                print('')
                print('**************************')
                print('run_files folder exists.')
                print(os.path.join(inps.work_dir, 'run_files_SQ'), ' already exists.')
                print('Please remove or rename this folder and try again.')
                print('')
                print('**************************')
                sys.exit(1)


            pairs = []
            for i in range(len(dateList)-1):
                pairs.append((dateList[0],dateList[i+1]))

            squeesarStack(inps, dateList, pairs)



if __name__ == "__main__":

  # Main engine
  main()